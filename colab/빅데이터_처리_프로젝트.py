# -*- coding: utf-8 -*-
"""빅데이터 처리 프로젝트.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jVPFbBK2oFQPwJ8gkgnmelOEu3FaqqHQ

# 한글 폰트 설정
"""

# 한글 폰트를 설치합니다.
import matplotlib.font_manager as fm
import matplotlib.pyplot as plt

!apt-get -qq -y install fonts-nanum > /dev/null

# 설치한 후 런타임 재실행!
import os
os.kill(os.getpid(), 9)

# 한글 폰트를 설정합니다.
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.font_manager as fm

mpl.rcParams['axes.unicode_minus'] = False

fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf',
    name='NanumGothic')

fm.fontManager.ttflist.insert(0, fe)
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'})

"""# 데이터 수집

movielist
"""

import numpy as np
import pandas as pd
import seaborn as sns
import requests
from copy import deepcopy

# 영화 목록을 API 를 사용해 가져옵니다.
APIKEY = 'USER_API_KEY'
url_movielist = 'http://kobis.or.kr/kobisopenapi/webservice/rest/movie/searchMovieList.json'

cols_movielist = ['movieCd', 'movieNm', 'movieNmEn', 'prdtYear', 'openDt', 'typeNm', 'prdtStatNm', 'nationAlt', 'genreAlt', 'repNationNm', 'repGenreNm', 'directors', 'companys', 'openYear']
df_movielist = pd.DataFrame(columns=cols_movielist)

for p in range(1000):
 r = requests.get(url_movielist, params={'key':APIKEY, 'openStartDt':'1941', 'openEndDt':'2023', 'itemPerPage':'100', 'curPage':str(p+1)})
 df_ = pd.DataFrame(r.json()['movieListResult']['movieList'])
 df_movielist = pd.concat([df_movielist, df_], axis=0)
 df_movielist.to_pickle("/content/movielist.pkl")

# 제작년도가 공백인 경우 NaN, 그 이외는 데이터 타입을 int 로 변경합니다.
df_movielist.loc[df_movielist["prdtYear"] == "", "prdtYear"] = np.nan
df_movielist.loc[~df_movielist["prdtYear"].isna(), "prdtYear"] = df_movielist.loc[~df_movielist["prdtYear"].isna()]["prdtYear"].astype(int)

# Date 형식의 개봉일자를 슬라이싱해 개봉년도를 채우고 데이터 타입을 int 로 변경합니다.
df_movielist["openYear"]=df_movielist["openDt"].apply(lambda x: x[:4])
df_movielist["openYear"]=df_movielist["openYear"].astype(int)

# 개봉일자도 데이터 타입을 int 로 변경합니다.
df_movielist["openDt"]=df_movielist["openDt"].astype(int)

# 개봉일자를 기준해 영화목록을 정렬합니다.
df_movielist.sort_values("openDt")
df_movielist.reset_index(drop=True, inplace=True)

# 영화목록을 객체로 변환해 파일로 저장합니다.
df_movielist.to_pickle("/content/movielist.pkl")

df_movielist = pd.read_pickle("/content/movielist.pkl")

# 미개봉 영화를 제외합니다.
df_movielist = df_movielist.query("prdtStatNm == '개봉'")

# 대표국가가 공백인 데이터들도 제외합니다.
df_movielist = df_movielist.drop(df_movielist.query("repNationNm == ''").index)

df_movielist = pd.read_pickle("/content/movielist.pkl")

# 영화사가 공백인 경우를 제외합니다.
df_movielist["companys"] = df_movielist["companys"].astype(str)
df_movielist = df_movielist.loc[df_movielist["companys"] != '[]']

# 영화사를 슬라이싱해 데이터 타입을 str 로 변경합니다.
df_movielist["companys"] = df_movielist["companys"].apply(lambda x: x.split("'")[7])
df_movielist["companys"] = df_movielist["companys"].astype(str)

# 월트디즈니 영화사 데이터셋을 구축합니다.
movielist_companys = ['월트디즈니', '월트 디즈니 픽쳐스', '월트디즈니코리아㈜', '월트 디즈니 프로덕션', '월트디즈니컴퍼니코리아(주)', '월트디즈니 애니메이션 스튜디오']
df_movielist_target = df_movielist[df_movielist['companys'].isin(movielist_companys)]

df_movielist.to_pickle("/content/movielist.pkl")
df_movielist_target.to_pickle("/content/movielist_target.pkl")

"""boxoffice"""

# KOBIS 에서 제공해주는 박스오피스 자료를 가져옵니다.
url_boxoffice = "https://jehyunlee.github.io/about/src/2021_datastory_movie/KOBIS_boxoffice.xlsx"
df_boxoffice = pd.read_excel(url_boxoffice, engine="openpyxl")

# 개봉일이 공백(NaT)인 경우를 제외한 후 데이터 타입을 str 로 변경합니다.
df_boxoffice = df_boxoffice.loc[df_boxoffice["개봉일"] != 'NaT']
df_boxoffice["개봉일"] = df_boxoffice["개봉일"].astype(str)

# 개봉일을 슬라이싱해 개봉년도를 채우고 형식이 잘못된 데이터들은 제외합니다.
df_boxoffice["openYear"] = df_boxoffice["개봉일"].apply(lambda x: x.split("-")[0])
df_boxoffice = df_boxoffice.loc[df_boxoffice["openYear"] != 'NaT']

# 개봉년도의 데이터 타입을 int 로 변경합니다.
df_boxoffice["openYear"] = df_boxoffice["openYear"].astype(int)

# 관객수 0일 경우를 제거합니다.
boxoffice_zero = df_boxoffice.loc[df_boxoffice["서울 관객수"] == 0].loc[df_boxoffice["전국 관객수"] == 0]
boxoffice_zero = boxoffice_zero.query("1941<= openYear")[["영화명", "국적", "openYear"]].sort_values("openYear").apply(lambda x: f"{x[0]} ({x[1]}, {x[2]})", axis=1)
df_boxoffice = df_boxoffice.loc[list(set(df_boxoffice.index) - set(boxoffice_zero.index))]

# 월트디즈니 영화를 따로 분리해놓아 저장합니다.
df_boxoffice_target = df_boxoffice.loc[df_boxoffice["제작사"].str.contains('디즈니') | df_boxoffice["수입사"].str.contains('디즈니') | df_boxoffice["배급사"].str.contains('디즈니')]

df_boxoffice.to_pickle("/content/boxoffice.pkl")
df_boxoffice_target.to_pickle("/content/boxoffice_target.pkl")

"""# 데이터 전처리

movielist
"""

# 나중에 사용할 장르 데이터셋을 새롭게 구축합니다.
df_movielist_genres = df_movielist[["movieCd", "movieNm", "openYear", "genreAlt"]]
df_movielist_target_genres = df_movielist_target[["movieCd", "movieNm", "openYear", "genreAlt"]]

# 장르가 공백일 경우를 제거합니다.
df_movielist_genres.dropna(subset=["genreAlt"], inplace=True)
df_movielist_target_genres.dropna(subset=["genreAlt"], inplace=True)

# 영화 장르의 종류를 알아냅니다.
movielist_genres = np.unique(','.join(df_movielist_genres.loc[df_movielist_genres["genreAlt"] != ""]['genreAlt']).split(','))
movielist_genres = [genre.split("(")[0] for genre in movielist_genres]

# 새로운 장르컬럼을 one-hot incodeing 형식과 유사하도록 생성합니다.
for movielist_genre in movielist_genres:
 df_movielist_genres[f"Genre_{movielist_genre}"] = df_movielist_genres["genreAlt"].str.contains(movielist_genre.split("(")[0]).astype('int')
 df_movielist_target_genres[f"Genre_{movielist_genre}"] = df_movielist_target_genres["genreAlt"].str.contains(movielist_genre.split("(")[0]).astype('int')

# 구 장르컬럼을 제거합니다.
df_movielist_genres.drop("genreAlt", axis=1, inplace=True)
df_movielist_target_genres.drop("genreAlt", axis=1, inplace=True)

# 장르가 공백일 경우는 *(0) 기타로 지정합니다.
df_movielist_genres.loc[df_movielist_genres.filter(like="Genre_").sum(axis=1) == 0, "Genre_기타"] = 1
df_movielist_target_genres.loc[df_movielist_target_genres.filter(like="Genre_").sum(axis=1) == 0, "Genre_기타"] = 1

# 장르가 2 개 이상일 경우 복합장르로 지정합니다.
df_movielist_genres["복합장르"] = 0
df_movielist_target_genres["복합장르"] = 0

df_movielist_genres.loc[df_movielist_genres.filter(like="G_").sum(axis=1) > 1, "복합장르"] = 1
df_movielist_target_genres.loc[df_movielist_target_genres.filter(like="G_").sum(axis=1) > 1, "복합장르"] = 1

df_movielist_genres.iloc[df_movielist_genres.filter(like="G_").sum(axis=1).argmax()]
df_movielist_target_genres.iloc[df_movielist_target_genres.filter(like="G_").sum(axis=1).argmax()]

# 년도별 장르 데이터셋 구축
df_movielist_genresY = df_movielist_genres[["movieCd", "openYear"]].groupby("openYear").count().reset_index().merge(df_movielist_genres.iloc[:,2:].groupby("openYear").sum().reset_index())
df_movielist_target_genresY = df_movielist_target_genres[["movieCd", "openYear"]].groupby("openYear").count().reset_index().merge(df_movielist_target_genres.iloc[:,2:].groupby("openYear").sum().reset_index())

df_movielist_genresY.drop("movieCd", axis=1, inplace=True)
df_movielist_target_genresY.drop("movieCd", axis=1, inplace=True)

df_movielist_genresY.fillna(0, inplace=True)
df_movielist_target_genresY.fillna(0, inplace=True)

df_movielist_genres.to_pickle("/content/movielist_genres.pkl")
df_movielist_genresY.to_pickle("/content/movielist_genresY.pkl")

df_movielist_target_genres.to_pickle("/content/movielist_target_genres.pkl")
df_movielist_target_genresY.to_pickle("/content/movielist_target_genresY.pkl")

"""Boxdoffice"""

# 영화 목록 데이터
df_movie_boxoffice = df_movielist[["movieCd", "movieNm", "openDt", "repNationNm"]]
df_movie_boxoffice_target = df_movielist_target[["movieCd", "movieNm", "openDt", "repNationNm"]]

# 영화명의 띄어쓰기를 제거합니다.
df_movie_boxoffice["movieNm"] = df_movie_boxoffice["movieNm"].apply(lambda x: x.replace(" ", ""))
df_movie_boxoffice_target["movieNm"] = df_movie_boxoffice_target["movieNm"].apply(lambda x: x.replace(" ", ""))

# 박스오피스 데이터하고 병합시키기 위해서 데이터 타입을 맞춰줍니다.
df_movie_boxoffice["openDt"] = df_movie_boxoffice["openDt"].astype(str)
df_movie_boxoffice_target["openDt"] = df_movie_boxoffice_target["openDt"].astype(str)

df_movie_boxoffice["openDt"] = df_movie_boxoffice["openDt"].apply(lambda x: f"{x[:4]}-{x[4:6]}-{x[6:]}")
df_movie_boxoffice_target["openDt"] = df_movie_boxoffice_target["openDt"].apply(lambda x: f"{x[:4]}-{x[4:6]}-{x[6:]}")

# 병합 Key로서 영화명, 개봉일, 대표국적을 사용합니다.
df_movie_boxoffice["영화명_개봉일_대표국적"] = df_movie_boxoffice[["movieNm", "openDt", "repNationNm"]].apply(lambda x: f"{x[0]}_{x[1]}_{x[2]}", axis=1)
df_movie_boxoffice_target["영화명_개봉일_대표국적"] = df_movie_boxoffice_target[["movieNm", "openDt", "repNationNm"]].apply(lambda x: f"{x[0]}_{x[1]}_{x[2]}", axis=1)

# 박스오피스 데이터
df_boxoffice_genres = deepcopy(df_boxoffice)
df_boxoffice_target_genres = deepcopy(df_boxoffice_target)

# 영화명의 띄어쓰기를 제거합니다.
df_boxoffice_genres["영화명"] = df_boxoffice_genres["영화명"].str.replace(' ', '')
df_boxoffice_target_genres["영화명"] = df_boxoffice_target_genres["영화명"].str.replace(' ', '')

# 병합 Key로서 영화명, 개봉일, 대표국적을 사용합니다.
df_boxoffice_genres["영화명_개봉일_대표국적"] = df_boxoffice_genres[["영화명", "개봉일", "국적"]].apply(lambda x: f"{x[0]}_{x[1]}_{x[2]}", axis=1)
df_boxoffice_target_genres["영화명_개봉일_대표국적"] = df_boxoffice_target_genres[["영화명", "개봉일", "국적"]].apply(lambda x: f"{x[0]}_{x[1]}_{x[2]}", axis=1)

# Key 를 사용해 병합을 준비합니다. *(DB Query Join)
list(set(df_movie_boxoffice["영화명_개봉일_대표국적"]) - set(df_boxoffice_genres["영화명_개봉일_대표국적"]))
list(set(df_movie_boxoffice_target["영화명_개봉일_대표국적"]) - set(df_boxoffice_target_genres["영화명_개봉일_대표국적"]))

# Key 를 사용해 병합을 진행합니다.
df_boxoffice_genres = df_movie_boxoffice.merge(df_boxoffice_genres[["영화명_개봉일_대표국적", "영화명", "개봉일", "서울 관객수", "전국 관객수", "국적", "openYear"]])
df_boxoffice_target_genres = df_movie_boxoffice_target.merge(df_boxoffice_target_genres[["영화명_개봉일_대표국적", "영화명", "개봉일", "서울 관객수", "전국 관객수", "국적", "openYear"]])

# 이전에 완성한 df_movielist_genres 를 병합해 박스오피스 + 장르의 데이터셋을 구축합니다.
df_boxoffice_genres = df_boxoffice_genres.merge(df_movielist_genres.drop(["movieNm", "openYear"], axis=1), on="movieCd")
df_boxoffice_target_genres = df_boxoffice_target_genres.merge(df_movielist_genres.drop(["movieNm", "openYear"], axis=1), on="movieCd")

# 사용한 Key 와 중복된 컬럼을 제거합니다.
df_movie_boxoffice = df_boxoffice_genres.drop(["movieNm", "openDt", "repNationNm", "영화명_개봉일_대표국적"], axis=1)
df_boxoffice_target_genres = df_boxoffice_target_genres.drop(["movieNm", "openDt", "repNationNm", "영화명_개봉일_대표국적"], axis=1)

df_movielist_target_genres.to_pickle("/content/movielist_target_genres.pkl")
df_movie_boxoffice_target.to_pickle("/content/movie_boxoffice_target.pkl")

df_boxoffice_genres.to_pickle("/content/boxoffice_genres.pkl")
df_boxoffice_target_genres.to_pickle("/content/boxoffice_target_genres.pkl")

# 년도별 관객수 데이터
df_boxofficeY_audience = df_boxoffice[["openYear", "전국 관객수", "서울 관객수"]].groupby("openYear").sum().reset_index()
df_boxofficeY_target_audience = df_boxoffice_target[["openYear", "전국 관객수", "서울 관객수"]].groupby("openYear").sum().reset_index()

# 년도별 매출액 데이터
df_boxofficeY_sales = df_boxoffice[["openYear", "전국 매출액", "서울 매출액"]].groupby("openYear").sum().reset_index()
df_boxofficeY_target_sales = df_boxoffice_target[["openYear", "전국 매출액", "서울 매출액"]].groupby("openYear").sum().reset_index()

df_boxofficeY_audience.to_pickle("/content/boxofficeY_audience.pkl")
df_boxofficeY_target_audience.to_pickle("/content/boxofficeY_target_audience.pkl")

df_boxofficeY_sales.to_pickle("/content/boxofficeY_sales.pkl")
df_boxofficeY_target_sales.to_pickle("/content/boxofficeY_target_sales.pkl")

df_boxofficeY_audience.head()

df_boxofficeY_target_audience.head()

df_boxofficeY_audience.tail()

df_boxofficeY_target_audience.tail()

movie_audience = df_boxofficeY_audience.query("1972 <= openYear <= 2020")["openYear"]
movie_audience



"""# 데이터 시각화"""

fig, ax = plt.subplots(figsize=(10, 8), constrained_layout=True, nrows=2)

# ax[0] = sns.distplot(df_boxofficeY_audience["openYear"], df_boxofficeY_audience["서울 관객수"], color='skyblue', label='서울 관객수', ax=ax[0])
# ax[1] = sns.distplot(df_boxofficeY_target_audience["openYear"], df_boxofficeY_target_audience["서울 관객수"], label='타겟 서울 관객수', ax=ax[1])

ax[0].plot(df_boxofficeY_audience["openYear"], df_boxofficeY_audience["서울 관객수"], color='skyblue', lw=3)
ax[1].plot(df_boxofficeY_target_audience["openYear"], df_boxofficeY_target_audience["서울 관객수"], color='red', lw=3)

ax[0].set_title('년도별 총 영화 관객수')
ax[1].set_title('년도별 디즈니 영화 관객수')

xticks = [1970, 1980, 1990, 2000, 2010, 2020]
ax[0].set_xticks(xticks)
ax[1].set_xticks(xticks)

ax[0].set_xlim(1970, 2020)
ax[1].set_xlim(1970, 2020)

ax[0].set_ylim(0, 750.5e5)
ax[1].set_ylim(0, 150.5e5)

yticks = [250e5, 500e5, 750e5,]
yticks_target = [50e5, 125e5, 200e5]
ax[0].set_yticks(yticks)
ax[1].set_yticks(yticks_target)

ax[0].set_yticklabels([f"{y/1e4:.0f}만명" if y > 0 else "0" for y in yticks])
ax[1].set_yticklabels([f"{y/1e4:.0f}만명" if y > 0 else "0" for y in yticks_target])

plt.show()